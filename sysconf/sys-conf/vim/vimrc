" All system-wide defaults are set in $VIMRUNTIME/debian.vim (usually just
" /usr/share/vim/vimcurrent/debian.vim) and sourced by the call to :runtime
" you can find below.  If you wish to change any of those settings, you should
" do it in this file (/etc/vim/vimrc), since debian.vim will be overwritten
" everytime an upgrade of the vim packages is performed.  It is recommended to
" make changes after sourcing debian.vim since it alters the value of the
" 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
if has("autocmd")
  filetype plugin indent on
endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set ignorecase		" Do case insensitive matching
set smartcase		" Do smart case matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

" Source a global configuration file if available
if filereadable("/etc/vim/vimrc.local")
  source /etc/vim/vimrc.local
endif

set autoindent
set cindent
set smartindent
set nu
set tw=78
set ts=8
set expandtab

"---OmniCppComplete---
"--required--
"this plugin is used in non-conpatible mode ,so make sure you are .
set nocp
"the plugin on is also needed
filetype plugin on 
"add <F12> to map to excute a action of ctag
map <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q . <CR>
map <F3> :Tlist <CR>

" -- configs --
  let OmniCpp_MayCompleteDot = 1 " autocomplete with .
  let OmniCpp_MayCompleteArrow = 1 " autocomplete with ->
  let OmniCpp_MayCompleteScope = 1 " autocomplete with ::
  let OmniCpp_SelectFirstItem = 2 " select first item (but don't insert)
  let OmniCpp_NamespaceSearch = 2 " search namespaces in this and included  files
  let OmniCpp_ShowPrototypeInAbbr = 1 " show function prototype (i.e.
                                      "parameters) in popup w
  "close automatically the preview window after a completion
  autocmd CursorMovedI * if pumvisible() == 0|pclose|endif
  autocmd InsertLeave * if pumvisible() == 0|pclose|endif

  "ctags for c++ (ominicppcompletion) config
  set tags+=~/.vim/tags/stl/tags
  set tags+=~/.vim/tags/qt4/tags

  "taglist
  let Tlist_Use_Right_Window=1
  let Tlist_File_Fold_Auto_Close=1


 
 "pydiction plugin to auto complete the python scripts 
 
 filetype plugin on
 let g:pydiction_location = '~/.vim/tools/pydiction/complete-dict'
 "default g:pydiction_menu_height = 15
 let g:pydiction_menu_height = 20
 
 "ctags configuration
 set tags+=./tags,../tags,../../tags

 "cscope configuration 
 "'casue I have add the plugin cscope_maps.vim in the $HOME/.vim/plugin/
 "so here it is not configured any more
 map <C-F11> :!cscope -Rbq <CR>
 set cscopetag
 set csto=0
" set cscopeverbose
 cs add cscope.out


"minibufexploer
    let g:miniBufExplMapWindowNavVim = 1   
    let g:miniBufExplMapWindowNavArrows = 1   
    let g:miniBufExplMapCTabSwitchBufs = 1   
    let g:miniBufExplModSelTarget = 1  
    let g:miniBufExplMoreThanOne=0  
 
"winmanager
let g:NERDTree_title="[NERDTree]"  
let g:winManagerWindowLayout="NERDTree|TagList"  
  
function! NERDTree_Start()  
    exec 'NERDTree'  
endfunction  
  
function! NERDTree_IsValid()  
    return 1  
endfunction  
  
nmap wm :WMToggle<CR> 


 "test
imap myemail1 wolfpythonlondon@gmail.com 
imap myemail2 lyh19901223@gmail.com 
"echo hostname()
"if hostname() =~ "debian"
"        echo hostname()
"endif

"set nocompatible " be iMproved
"filetype off " required!
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

Bundle 'gmarik/vundle'

"vim scripts repos
Bundle 'taglist.vim'
Bundle 'winmanager'
Bundle 'The-NERD-tree'
Bundle 'minibufexplorerpp'
Bundle 'wolfpython/cscope_map.vim'
Bundle 'TagHighlight'

